# A custom command and target to turn the OpenCL kernel into a byte array header
# The normal build depends on it properly and if the kernel file is changed, then
# a rebuild of libethash-cl should be triggered

#TODO: clean up the copy&pasting here

add_custom_command(
	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/ethash.h
	COMMAND ${CMAKE_COMMAND} ARGS
	-DBIN2H_SOURCE_FILE="${CMAKE_CURRENT_SOURCE_DIR}/kernels/cl/ethash.cl"
	-DBIN2H_VARIABLE_NAME=ethash_cl
	-DBIN2H_HEADER_FILE="${CMAKE_CURRENT_BINARY_DIR}/ethash.h"
	-P "${CMAKE_CURRENT_SOURCE_DIR}/bin2h.cmake"
	COMMENT "Generating OpenCL Kernel Byte Array"
	DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/kernels/cl/ethash.cl
)
add_custom_target(clbin2h_stable DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/ethash.h ${CMAKE_CURRENT_SOURCE_DIR}/cl/ethash.cl)

set(SOURCES
	CLMiner.h
	CLMiner.cpp
	ethash.h
)

#if(APPLE)
#	# On macOS use system OpenCL library.
#	find_package(OpenCL REQUIRED)
#else()
#	hunter_add_package(OpenCL)
#	find_package(OpenCL CONFIG REQUIRED)
#endif()

include_directories(
PRIVATE
	..
	${CMAKE_CURRENT_BINARY_DIR}
	C:/msys64/ucrt64/include/ssp
	# C:/msys64/usr/include/json
	C:/msys64/usr/include/ethash
	${CUDAToolkit_LIBRARY_DIR}
	${CODA_CLANG_COMPILER}/../lib
)
set(OPENCL_ROOT_DIR ${CUDAToolkit_LIBRARY_DIR})
find_package(OpenCL REQUIRED)

add_library(ethash-cl ${SOURCES})
target_link_directories(ethash-cl
PRIVATE
	${BOOST_ROOT}/lib
)
target_link_libraries(ethash-cl 
PUBLIC 
	ethcore
	# C:/msys64/usr/lib/libjsoncpp.a
	ethash::ethash 
	ethash::ethash-global-context 
	OpenSSL::SSL
	OpenSSL::Crypto
PRIVATE
	OpenCL::OpenCL
	Threads::Threads
	Boost::filesystem
)
